name: 🧪 Dev Auto Release

on:
  workflow_run:
    workflows: ["🧪 Test"]
    types: [completed]
    branches: [dev]
  schedule:
    # Check for successful tests every 10 minutes and auto-release if needed
    - cron: '*/10 * * * *'
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip test requirement (emergency releases only)'
        required: false
        default: false
        type: boolean
      force_release:
        description: 'Force release even if no new commits'
        required: false
        default: false
        type: boolean

jobs:
  check-and-release:
    runs-on: [self-hosted, webai]
    # Run if: tests passed, manual dispatch with skip_tests, or scheduled check
    if: ${{ github.event.workflow_run.conclusion == 'success' || (github.event_name == 'workflow_dispatch' && (github.event.inputs.skip_tests == 'true' || github.event.inputs.force_release == 'true')) || github.event_name == 'schedule' }}
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      latest_commit: ${{ steps.check.outputs.latest_commit }}
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Check if release needed
        id: check
        run: |
          echo "🔍 Checking if dev release is needed..."

          # For manual dispatch or workflow_run, always release
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] || [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "latest_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            echo "✅ Release triggered by ${{ github.event_name }}"
            exit 0
          fi

          # For scheduled runs, check if there are new commits since last dev release
          echo "📅 Scheduled check - looking for new commits..."

          # Get the latest dev release tag
          LATEST_DEV_TAG=$(git tag -l "*-dev.*" --sort=-version:refname | head -1)

          if [ -z "$LATEST_DEV_TAG" ]; then
            echo "🆕 No previous dev releases found - will create first dev release"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "latest_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if there are commits since the last dev release
          COMMITS_SINCE=$(git rev-list ${LATEST_DEV_TAG}..HEAD --count)

          if [ "$COMMITS_SINCE" -gt 0 ]; then
            echo "🆕 Found $COMMITS_SINCE new commits since $LATEST_DEV_TAG"
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "latest_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          else
            echo "✅ No new commits since $LATEST_DEV_TAG - no release needed"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

  publish-dev:
    runs-on: [self-hosted, webai]
    needs: check-and-release
    if: ${{ needs.check-and-release.outputs.should_release == 'true' }}
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: |
            webai-mcp/package-lock.json
            webai-server/package-lock.json

      - name: 🔧 Install dependencies (MCP)
        run: |
          cd webai-mcp
          npm install

      - name: 🔧 Install dependencies (Server)
        run: |
          cd webai-server
          npm install

      - name: 🔧 Install root dependencies (for changelog automation)
        run: npm ci

      - name: 🏗️ Build packages
        run: |
          cd webai-mcp
          npm run build
          cd ../webai-server
          npm run build

      - name: 📈 Get current version and increment dev version
        id: version
        run: |
          cd webai-server
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Regular dev version: 1.4.0-dev.1, 1.4.0-dev.2, etc.
          if [[ $CURRENT_VERSION == *"-dev."* ]]; then
            # Increment the dev number
            npm version prerelease --preid=dev --no-git-tag-version
          else
            # Create first dev version
            npm version prerelease --preid=dev --no-git-tag-version
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update webai-mcp to same version
          cd ../webai-mcp
          npm version $NEW_VERSION --no-git-tag-version

          # Update chrome extension manifest version
          cd ../chrome-extension
          # For extension, remove dev suffixes for valid version format
          MANIFEST_VERSION=$(echo "$NEW_VERSION" | sed 's/-dev\.[0-9]*$//')
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$MANIFEST_VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          "

      - name: 📝 Update CHANGELOG.md automatically
        run: |
          # Generate changelog for unreleased changes
          npm run changelog:update

          # Add dev release entry to changelog
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          TODAY=$(date +%Y-%m-%d)

          # Create temporary changelog entry
          cat > temp_changelog.md << EOF
          ## [${NEW_VERSION}] - ${TODAY}

          ### 🧪 **Development Release**

          This is an automated development release with the latest features and improvements.

          #### **✨ Recent Changes**
          $(git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | head -10)

          #### **🚀 Installation**
          \`\`\`bash
          npx @cpjet64/webai-mcp@dev
          npx @cpjet64/webai-server@dev
          \`\`\`

          ---

          EOF

          # Insert new entry after [Unreleased] section
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            # Find line number of [Unreleased] section
            UNRELEASED_LINE=$(grep -n "## \[Unreleased\]" CHANGELOG.md | cut -d: -f1)
            # Find next release section
            NEXT_RELEASE_LINE=$(tail -n +$((UNRELEASED_LINE + 1)) CHANGELOG.md | grep -n "^## \[" | head -1 | cut -d: -f1)
            if [ -n "$NEXT_RELEASE_LINE" ]; then
              NEXT_RELEASE_LINE=$((UNRELEASED_LINE + NEXT_RELEASE_LINE))
              # Insert new release before next release
              head -n $((NEXT_RELEASE_LINE - 1)) CHANGELOG.md > temp_full_changelog.md
              cat temp_changelog.md >> temp_full_changelog.md
              tail -n +$NEXT_RELEASE_LINE CHANGELOG.md >> temp_full_changelog.md
              mv temp_full_changelog.md CHANGELOG.md
            else
              # No other releases, append at end
              cat CHANGELOG.md temp_changelog.md > temp_full_changelog.md
              mv temp_full_changelog.md CHANGELOG.md
            fi
          else
            # No [Unreleased] section, prepend to file
            cat temp_changelog.md CHANGELOG.md > temp_full_changelog.md
            mv temp_full_changelog.md CHANGELOG.md
          fi

          rm -f temp_changelog.md

      - name: 📦 Create Chrome Extension Package
        run: |
          cd chrome-extension
          zip -r ../webai-chrome-extension-v${{ steps.version.outputs.new_version }}.zip . \
            -x "*.git*" "node_modules/*" "*.DS_Store*"

      - name: 📦 Create MCP Server Package
        run: |
          cd webai-mcp
          npm pack
          mv *.tgz ../webai-mcp-v${{ steps.version.outputs.new_version }}.tgz

      - name: 📦 Create Server Package
        run: |
          cd webai-server
          npm pack
          mv *.tgz ../webai-server-v${{ steps.version.outputs.new_version }}.tgz

      - name: 📤 Publish webai-server to NPM (dev tag)
        run: |
          cd webai-server
          npm publish --tag dev --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEPLOY }}

      - name: 📤 Publish webai-mcp to NPM (dev tag)
        run: |
          cd webai-mcp
          npm publish --tag dev --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEPLOY }}

      - name: 📝 Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"

          cat > dev-release-notes.md << EOF
          ## ⚠️ Development Release Warning

          This is a **development release** with the latest features and improvements. It may contain experimental functionality and could be unstable. For production use, please install the latest stable release with \`@latest\`.

          ## 📦 Installation

          ### Quick Start (Development Version)
          \`\`\`bash
          # Install MCP Server (dev)
          npx @cpjet64/webai-mcp@dev

          # Install WebAI Server (dev)
          npx @cpjet64/webai-server@dev
          \`\`\`

          ### Chrome Extension (Development)
          1. Download \`webai-chrome-extension-v${VERSION}.zip\`
          2. Extract the zip file
          3. Open Chrome → Extensions → Developer mode → Load unpacked
          4. Select the extracted folder

          ## 🆕 What's New in Development

          - Latest development features including RefreshBrowser tool
          - Bug fixes and improvements
          - Experimental functionality
          - Enhanced cross-platform support

          ## 🛠️ Features (Development Build)

          - ✅ **18+ MCP Tools** for browser automation
          - ✅ **RefreshBrowser Tool** - Phase 1 implementation
          - ✅ **Storage Access** - cookies, localStorage, sessionStorage
          - ✅ **Element Inspection** - CSS selectors + computed styles
          - ✅ **Enhanced Screenshots** - works with separate DevTools
          - ✅ **Audit & Debug Modes** - comprehensive analysis
          - ✅ **Windows Compatibility** - full cross-platform support
          - ✅ **Multi-language Documentation** - English + Chinese

          ## 🔧 Compatibility

          - Node.js 18+
          - Chrome/Chromium browsers
          - Windows, macOS, Linux
          - MCP clients: Cursor, Claude Desktop, Cline, Zed

          ## 📋 Development Notes

          - This version includes the latest commits from the \`dev\` branch
          - Features may change before stable release
          - Report issues on GitHub for quick fixes
          - Feedback welcome for new features

          **Full Changelog**: https://github.com/cpjet64/WebAI-MCP/compare/main...dev

          ---

          📚 **Documentation**: [WebAI-MCP Docs](https://github.com/cpjet64/WebAI-MCP)
          🐛 **Issues**: [Report bugs](https://github.com/cpjet64/WebAI-MCP/issues)
          💬 **Discussions**: [Community](https://github.com/cpjet64/WebAI-MCP/discussions)
          EOF

      - name: 🏷️ Create dev release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: "🧪 WebAI-MCP v${{ steps.version.outputs.new_version }} (Dev)"
          body_path: dev-release-notes.md
          draft: false
          prerelease: true
          files: |
            webai-chrome-extension-v${{ steps.version.outputs.new_version }}.zip
            webai-mcp-v${{ steps.version.outputs.new_version }}.tgz
            webai-server-v${{ steps.version.outputs.new_version }}.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 💾 Commit version and changelog changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add webai-server/package.json webai-mcp/package.json chrome-extension/manifest.json CHANGELOG.md
          git commit -m "chore: bump dev version to ${{ steps.version.outputs.new_version }} and update changelog" || exit 0
          git push

      - name: 📊 Dev Release Summary
        run: |
          echo "## 🧪 Dev Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** Development Release (Prerelease)" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tests Status:** ${{ github.event.workflow_run.conclusion || 'Skipped (Manual)' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Built and tested packages" >> $GITHUB_STEP_SUMMARY
          echo "- Published to NPM with @dev tag" >> $GITHUB_STEP_SUMMARY
          echo "- Created GitHub prerelease" >> $GITHUB_STEP_SUMMARY
          echo "- Updated version numbers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- [\`@cpjet64/webai-mcp@dev\`](https://www.npmjs.com/package/@cpjet64/webai-mcp)" >> $GITHUB_STEP_SUMMARY
          echo "- [\`@cpjet64/webai-server@dev\`](https://www.npmjs.com/package/@cpjet64/webai-server)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Installation:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npx @cpjet64/webai-mcp@dev" >> $GITHUB_STEP_SUMMARY
          echo "npx @cpjet64/webai-server@dev" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
