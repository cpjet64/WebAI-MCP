name: 🚀 Main Auto Release

on:
  workflow_run:
    workflows: ["🧪 Test"]
    types: [completed]
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  publish-main:
    runs-on: [self-hosted, webai]
    # Only run if tests passed (for workflow_run) or for PRs
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: |
            webai-mcp/package-lock.json
            webai-server/package-lock.json

      - name: 🔧 Install dependencies (MCP)
        run: |
          cd webai-mcp
          npm ci --prefer-offline || (rm -f package-lock.json && npm install)

      - name: 🔧 Install dependencies (Server)
        run: |
          cd webai-server
          npm ci --prefer-offline || (rm -f package-lock.json && npm install)

      - name: 🔧 Install root dependencies (for changelog automation)
        run: npm ci --prefer-offline || (rm -f package-lock.json && npm install)

      - name: 🏗️ Build packages
        run: |
          cd webai-mcp
          npm run build
          cd ../webai-server
          npm run build

      - name: 📈 Get current version and increment patch version
        id: version
        run: |
          cd webai-server
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Determine if this is a PR or push/merge
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # PR version: 1.4.0-pr-main.456
            BASE_VERSION=$(echo "$CURRENT_VERSION" | sed 's/-pr-main\.[0-9]*$//')
            PR_NUMBER="${{ github.event.number }}"
            NEW_VERSION="${BASE_VERSION}-pr-main.${PR_NUMBER}"
            echo "Creating PR version: $NEW_VERSION"
          else
            # Regular main version: check if release exists, increment if needed
            if gh release view "v$CURRENT_VERSION" >/dev/null 2>&1; then
              echo "Release v$CURRENT_VERSION already exists, incrementing patch version"
              npm version patch --no-git-tag-version
            else
              echo "No existing release for v$CURRENT_VERSION, using current version"
            fi
            NEW_VERSION=$(node -p "require('./package.json').version")
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update webai-mcp to same version
          cd ../webai-mcp
          npm version $NEW_VERSION --no-git-tag-version

          # Update chrome extension manifest version
          cd ../chrome-extension
          # For extension, remove pr suffixes for valid version format
          MANIFEST_VERSION=$(echo "$NEW_VERSION" | sed 's/-pr-main\.[0-9]*$//')
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$MANIFEST_VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Update CHANGELOG.md automatically
        run: |
          # Generate changelog for unreleased changes
          npm run changelog:update

          # Add production release entry to changelog
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          TODAY=$(date +%Y-%m-%d)
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          # Get changes since last release
          if [ -n "$LAST_TAG" ]; then
            CHANGES=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s" --no-merges | grep -E "^- (feat|fix|docs|style|refactor|perf|test|chore|ci|build):" | head -20)
          else
            CHANGES=$(git log --oneline --pretty=format:"- %s" --no-merges | grep -E "^- (feat|fix|docs|style|refactor|perf|test|chore|ci|build):" | head -20)
          fi

          # Create production changelog entry
          cat > temp_changelog.md << EOF
          ## [${NEW_VERSION}] - ${TODAY}

          ### 🚀 **Production Release**

          #### **✨ What's New**
          ${CHANGES}

          #### **📦 Installation**
          \`\`\`bash
          npx @cpjet64/webai-mcp@latest
          npx @cpjet64/webai-server@latest
          \`\`\`

          #### **🔗 Links**
          - [GitHub Release](https://github.com/cpjet64/WebAI-MCP/releases/tag/v${NEW_VERSION})
          - [NPM Package (MCP)](https://www.npmjs.com/package/@cpjet64/webai-mcp)
          - [NPM Package (Server)](https://www.npmjs.com/package/@cpjet64/webai-server)

          ---

          EOF

          # Update CHANGELOG.md by replacing [Unreleased] with new version
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            # Replace [Unreleased] with new version
            sed -i "s/## \[Unreleased\] - Development/## [${NEW_VERSION}] - ${TODAY}/" CHANGELOG.md

            # Add new [Unreleased] section at the top
            sed -i "/^## \[${NEW_VERSION}\]/i\\## [Unreleased] - Development\n\n### 🚀 **Future Features (In Development)**\n\nUpcoming features and improvements will be listed here.\n\n---\n" CHANGELOG.md
          else
            # No [Unreleased] section, prepend new release
            cat temp_changelog.md CHANGELOG.md > temp_full_changelog.md
            mv temp_full_changelog.md CHANGELOG.md
          fi

          rm -f temp_changelog.md

      - name: 📝 Update Documentation
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Update main README
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" README.md

          # Update MCP README if it exists
          if [ -f "webai-mcp/README.md" ]; then
            sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" webai-mcp/README.md
          fi

          # Update Chinese README if it exists
          if [ -f "docs/i18n/README_CN.md" ]; then
            sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" docs/i18n/README_CN.md
          fi

      - name: 📦 Create Chrome Extension Package
        run: |
          cd chrome-extension
          zip -r ../webai-chrome-extension-v${{ steps.version.outputs.new_version }}.zip . \
            -x "*.git*" "node_modules/*" "*.DS_Store*"

      - name: 📦 Create MCP Server Package
        run: |
          cd webai-mcp
          npm pack
          mv *.tgz ../webai-mcp-v${{ steps.version.outputs.new_version }}.tgz

      - name: 📦 Create Server Package
        run: |
          cd webai-server
          npm pack
          mv *.tgz ../webai-server-v${{ steps.version.outputs.new_version }}.tgz

      - name: 📤 Publish webai-server to NPM (latest tag)
        run: |
          cd webai-server
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEPLOY }}

      - name: 📤 Publish webai-mcp to NPM (latest tag)
        run: |
          cd webai-mcp
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEPLOY }}

      - name: 📝 Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges | head -20)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges | head -20)
          fi

          cat > main-release-notes.md << EOF
          # 🚀 WebAI-MCP v${VERSION}

          ## 📋 What's New

          ${CHANGELOG}

          ## 📦 Installation

          ### Quick Start
          \`\`\`bash
          # Install MCP Server
          npx @cpjet64/webai-mcp@${VERSION}

          # Install WebAI Server
          npx @cpjet64/webai-server@${VERSION}
          \`\`\`

          ### Chrome Extension
          1. Download \`webai-chrome-extension-v${VERSION}.zip\`
          2. Extract and load in Chrome → Extensions → Developer mode → Load unpacked

          ## 🛠️ Features

          - ✅ **17 MCP Tools** for browser automation
          - ✅ **Storage Access** - cookies, localStorage, sessionStorage
          - ✅ **Element Inspection** - CSS selectors + computed styles
          - ✅ **Enhanced Screenshots** - works with separate DevTools
          - ✅ **Audit & Debug Modes** - comprehensive analysis
          - ✅ **Windows Compatibility** - full cross-platform support
          - ✅ **Multi-language Documentation** - English + Chinese

          ## 🔧 Compatibility

          - Node.js 18+ | Chrome/Chromium | Windows, macOS, Linux
          - MCP clients: Cursor, Claude Desktop, Cline, Zed

          ---

          📚 **Documentation**: [WebAI-MCP](https://github.com/cpjet64/WebAI-MCP)
          🐛 **Issues**: [Report bugs](https://github.com/cpjet64/WebAI-MCP/issues)
          EOF

      - name: 🏷️ Create main release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: "${{ github.event_name == 'pull_request' && '🔀' || '🚀' }} WebAI-MCP v${{ steps.version.outputs.new_version }}${{ github.event_name == 'pull_request' && format(' (PR #{0} to main)', github.event.number) || '' }}"
          body_path: main-release-notes.md
          draft: false
          prerelease: ${{ github.event_name == 'pull_request' }}
          files: |
            webai-chrome-extension-v${{ steps.version.outputs.new_version }}.zip
            webai-mcp-v${{ steps.version.outputs.new_version }}.tgz
            webai-server-v${{ steps.version.outputs.new_version }}.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 💾 Commit version and changelog changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .
          git commit -m "chore: release v${{ steps.version.outputs.new_version }} - automated release with version bump, changelog update, and NPM publishing" || exit 0
          git tag "v${{ steps.version.outputs.new_version }}"
          git push origin main
          git push origin "v${{ steps.version.outputs.new_version }}"

      - name: 📊 Main Release Summary
        run: |
          echo "## 🚀 Main Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** Production Release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Completed Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Built and tested packages" >> $GITHUB_STEP_SUMMARY
          echo "- Published to NPM with @latest tag" >> $GITHUB_STEP_SUMMARY
          echo "- Created GitHub release" >> $GITHUB_STEP_SUMMARY
          echo "- Updated version numbers and documentation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Published Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- [\`@cpjet64/webai-mcp@${{ steps.version.outputs.new_version }}\`](https://www.npmjs.com/package/@cpjet64/webai-mcp)" >> $GITHUB_STEP_SUMMARY
          echo "- [\`@cpjet64/webai-server@${{ steps.version.outputs.new_version }}\`](https://www.npmjs.com/package/@cpjet64/webai-server)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Installation:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npx @cpjet64/webai-mcp@latest" >> $GITHUB_STEP_SUMMARY
          echo "npx @cpjet64/webai-server@latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
