name: üîß Manual Release

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Target branch for release'
        required: true
        default: 'main'
        type: choice
        options:
          - main
          - dev
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string
      prerelease:
        description: 'Create prerelease (only for main branch)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip tests (faster release)'
        required: false
        default: false
        type: boolean

jobs:
  manual-release:
    runs-on: [self-hosted, webai]
    permissions:
      contents: write
      packages: write
      id-token: write
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: üîß Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: üîß Install dependencies (workspace setup)
        run: npm ci --prefer-offline || (rm -f package-lock.json && npm install)

      - name: üèóÔ∏è Build packages
        run: |
          cd webai-mcp
          npm run build
          cd ../webai-server
          npm run build

      - name: üß™ Run Tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          echo "üß™ Testing MCP Server..."
          cd webai-mcp
          timeout 10s node dist/mcp-server.js || echo "‚úÖ MCP Server test passed"

          echo "üß™ Testing WebAI Server..."
          cd ../webai-server
          timeout 5s node dist/browser-connector.js || echo "‚úÖ WebAI Server test passed"

          echo "üß™ Testing Chrome Extension..."
          cd ../chrome-extension
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            if (!manifest.version || !manifest.name) throw new Error('Invalid manifest');
            console.log('‚úÖ Chrome Extension test passed');
          "

      - name: üìà Determine and set version
        id: version
        run: |
          cd webai-server
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else
            if [ "${{ github.event.inputs.target_branch }}" = "dev" ]; then
              # For dev branch, create dev version
              if [[ $CURRENT_VERSION == *"-dev."* ]]; then
                npm version prerelease --preid=dev --no-git-tag-version
              else
                npm version prerelease --preid=dev --no-git-tag-version
              fi
            else
              # For main branch, use specified version type
              npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
            fi
            NEW_VERSION=$(node -p "require('./package.json').version")
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "**Version Change:** $CURRENT_VERSION ‚Üí $NEW_VERSION" >> $GITHUB_STEP_SUMMARY

          # Update webai-mcp to same version
          cd ../webai-mcp
          npm version $NEW_VERSION --no-git-tag-version

          # Update chrome extension manifest version
          cd ../chrome-extension
          if [ "${{ github.event.inputs.target_branch }}" = "dev" ]; then
            # For dev, remove -dev suffix for manifest
            MANIFEST_VERSION=$(echo "$NEW_VERSION" | sed 's/-dev\.[0-9]*$//')
          else
            MANIFEST_VERSION="$NEW_VERSION"
          fi
          
          node -e "
            const fs = require('fs');
            const manifest = JSON.parse(fs.readFileSync('manifest.json', 'utf8'));
            manifest.version = '$MANIFEST_VERSION';
            fs.writeFileSync('manifest.json', JSON.stringify(manifest, null, 2) + '\n');
          "

      - name: üìù Update CHANGELOG.md automatically
        run: |
          # Generate changelog for unreleased changes
          npm run changelog:update

          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          TODAY=$(date +%Y-%m-%d)
          BRANCH="${{ github.event.inputs.target_branch }}"

          if [ "$BRANCH" = "dev" ]; then
            # Dev release changelog
            cat > temp_changelog.md << EOF
          ## [${NEW_VERSION}] - ${TODAY}

          ### üß™ **Development Release (Manual)**

          This is a manual development release with the latest features and improvements.

          #### **‚ú® Recent Changes**
          $(git log --oneline --pretty=format:"- %s" $(git describe --tags --abbrev=0 2>/dev/null || echo "HEAD~10")..HEAD | head -10)

          #### **üöÄ Installation**
          \`\`\`bash
          npx @cpjet64/webai-mcp@dev
          npx @cpjet64/webai-server@dev
          \`\`\`

          ---

          EOF
          else
            # Main release changelog
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              CHANGES=$(git log $LAST_TAG..HEAD --oneline --pretty=format:"- %s" --no-merges | grep -E "^- (feat|fix|docs|style|refactor|perf|test|chore|ci|build):" | head -20)
            else
              CHANGES=$(git log --oneline --pretty=format:"- %s" --no-merges | grep -E "^- (feat|fix|docs|style|refactor|perf|test|chore|ci|build):" | head -20)
            fi

            cat > temp_changelog.md << EOF
          ## [${NEW_VERSION}] - ${TODAY}

          ### üöÄ **Production Release (Manual)**

          #### **‚ú® What's New**
          ${CHANGES}

          #### **üì¶ Installation**
          \`\`\`bash
          npx @cpjet64/webai-mcp@latest
          npx @cpjet64/webai-server@latest
          \`\`\`

          ---

          EOF
          fi

          # Update CHANGELOG.md
          if grep -q "## \[Unreleased\]" CHANGELOG.md; then
            if [ "$BRANCH" = "main" ]; then
              # Replace [Unreleased] with new version for main
              sed -i "s/## \[Unreleased\] - Development/## [${NEW_VERSION}] - ${TODAY}/" CHANGELOG.md
              sed -i "/^## \[${NEW_VERSION}\]/i\\## [Unreleased] - Development\n\n### üöÄ **Future Features (In Development)**\n\nUpcoming features and improvements will be listed here.\n\n---\n" CHANGELOG.md
            else
              # Insert after [Unreleased] for dev
              UNRELEASED_LINE=$(grep -n "## \[Unreleased\]" CHANGELOG.md | cut -d: -f1)
              NEXT_RELEASE_LINE=$(tail -n +$((UNRELEASED_LINE + 1)) CHANGELOG.md | grep -n "^## \[" | head -1 | cut -d: -f1)
              if [ -n "$NEXT_RELEASE_LINE" ]; then
                NEXT_RELEASE_LINE=$((UNRELEASED_LINE + NEXT_RELEASE_LINE))
                head -n $((NEXT_RELEASE_LINE - 1)) CHANGELOG.md > temp_full_changelog.md
                cat temp_changelog.md >> temp_full_changelog.md
                tail -n +$NEXT_RELEASE_LINE CHANGELOG.md >> temp_full_changelog.md
                mv temp_full_changelog.md CHANGELOG.md
              else
                cat CHANGELOG.md temp_changelog.md > temp_full_changelog.md
                mv temp_full_changelog.md CHANGELOG.md
              fi
            fi
          else
            cat temp_changelog.md CHANGELOG.md > temp_full_changelog.md
            mv temp_full_changelog.md CHANGELOG.md
          fi

          rm -f temp_changelog.md

      - name: üìù Update Documentation (main branch only)
        if: github.event.inputs.target_branch == 'main'
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Update main README
          sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" README.md

          # Update MCP README if it exists
          if [ -f "webai-mcp/README.md" ]; then
            sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" webai-mcp/README.md
          fi

          # Update Chinese README if it exists
          if [ -f "docs/i18n/README_CN.md" ]; then
            sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$NEW_VERSION/g" docs/i18n/README_CN.md
          fi

      - name: üì¶ Create Release Assets
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"

          # Create Chrome Extension Package
          cd chrome-extension
          zip -r ../webai-chrome-extension-v$NEW_VERSION.zip . \
            -x "*.git*" "node_modules/*" "*.DS_Store*"

          # Create NPM packages
          cd ../webai-mcp
          npm pack
          mv *.tgz ../webai-mcp-v$NEW_VERSION.tgz

          cd ../webai-server
          npm pack
          mv *.tgz ../webai-server-v$NEW_VERSION.tgz

      - name: üì§ Publish to NPM
        run: |
          BRANCH="${{ github.event.inputs.target_branch }}"
          
          if [ "$BRANCH" = "dev" ]; then
            echo "üöÄ Publishing to NPM with @dev tag..."
            cd webai-server
            npm publish --tag dev --access public
            cd ../webai-mcp
            npm publish --tag dev --access public
          else
            echo "üöÄ Publishing to NPM with @latest tag..."
            cd webai-server
            npm publish --access public
            cd ../webai-mcp
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEPLOY }}

      - name: üìù Generate Release Notes
        id: release-notes
        run: |
          VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH="${{ github.event.inputs.target_branch }}"
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s" --no-merges | head -20)
          else
            CHANGELOG=$(git log --pretty=format:"- %s" --no-merges | head -20)
          fi

          if [ "$BRANCH" = "dev" ]; then
            cat > release-notes.md << EOF
          ## ‚ö†Ô∏è Development Release Warning (Manual)

          This is a **manual development release** with the latest features and improvements. It may contain experimental functionality and could be unstable.

          ## üì¶ Installation

          \`\`\`bash
          npx @cpjet64/webai-mcp@dev
          npx @cpjet64/webai-server@dev
          \`\`\`

          ## üìã What's New

          ${CHANGELOG}

          ---

          üìö **Documentation**: [WebAI-MCP](https://github.com/cpjet64/WebAI-MCP)
          üêõ **Issues**: [Report bugs](https://github.com/cpjet64/WebAI-MCP/issues)
          EOF
          else
            cat > release-notes.md << EOF
          # üöÄ WebAI-MCP v${VERSION} (Manual Release)

          ## üìã What's New

          ${CHANGELOG}

          ## üì¶ Installation

          \`\`\`bash
          npx @cpjet64/webai-mcp@${VERSION}
          npx @cpjet64/webai-server@${VERSION}
          \`\`\`

          ## üõ†Ô∏è Features

          - ‚úÖ **17 MCP Tools** for browser automation
          - ‚úÖ **Storage Access** - cookies, localStorage, sessionStorage
          - ‚úÖ **Element Inspection** - CSS selectors + computed styles
          - ‚úÖ **Enhanced Screenshots** - works with separate DevTools
          - ‚úÖ **Audit & Debug Modes** - comprehensive analysis
          - ‚úÖ **Windows Compatibility** - full cross-platform support

          ---

          üìö **Documentation**: [WebAI-MCP](https://github.com/cpjet64/WebAI-MCP)
          üêõ **Issues**: [Report bugs](https://github.com/cpjet64/WebAI-MCP/issues)
          EOF
          fi

      - name: üè∑Ô∏è Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: "${{ github.event.inputs.target_branch == 'dev' && 'üß™' || 'üöÄ' }} WebAI-MCP v${{ steps.version.outputs.new_version }}${{ github.event.inputs.target_branch == 'dev' && ' (Dev Manual)' || ' (Manual)' }}"
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.target_branch == 'dev' || github.event.inputs.prerelease == 'true' }}
          files: |
            webai-chrome-extension-v${{ steps.version.outputs.new_version }}.zip
            webai-mcp-v${{ steps.version.outputs.new_version }}.tgz
            webai-server-v${{ steps.version.outputs.new_version }}.tgz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üíæ Commit and Push Changes
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH="${{ github.event.inputs.target_branch }}"
          
          git add .
          git commit -m "chore: manual release v$NEW_VERSION on $BRANCH branch" || exit 0
          
          if [ "$BRANCH" = "main" ]; then
            git tag "v$NEW_VERSION"
            git push origin main
            git push origin "v$NEW_VERSION"
          else
            git push origin dev
          fi

      - name: üéâ Release Complete
        run: |
          NEW_VERSION="${{ steps.version.outputs.new_version }}"
          BRANCH="${{ github.event.inputs.target_branch }}"

          echo "## üéâ Manual Release Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** $BRANCH" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Completed Steps:" >> $GITHUB_STEP_SUMMARY
          echo "- Version bumped and committed" >> $GITHUB_STEP_SUMMARY
          echo "- Tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub release created" >> $GITHUB_STEP_SUMMARY
          echo "- NPM packages published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì¶ Published Packages:" >> $GITHUB_STEP_SUMMARY
          if [ "$BRANCH" = "dev" ]; then
            echo "- [\`@cpjet64/webai-mcp@dev\`](https://www.npmjs.com/package/@cpjet64/webai-mcp)" >> $GITHUB_STEP_SUMMARY
            echo "- [\`@cpjet64/webai-server@dev\`](https://www.npmjs.com/package/@cpjet64/webai-server)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- [\`@cpjet64/webai-mcp@$NEW_VERSION\`](https://www.npmjs.com/package/@cpjet64/webai-mcp)" >> $GITHUB_STEP_SUMMARY
            echo "- [\`@cpjet64/webai-server@$NEW_VERSION\`](https://www.npmjs.com/package/@cpjet64/webai-server)" >> $GITHUB_STEP_SUMMARY
          fi
